name: Debug Build

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      skip_upload:
        description: 'Skip App Store upload (test build only)'
        required: false
        default: true
        type: boolean

env:
  XCODE_VERSION: '16.0'

jobs:
  debug-build:
    name: Debug Build Process
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
        xcodebuild -version
        
    - name: Debug environment
      run: |
        echo "🔍 Environment Debug Info:"
        echo "Runner temp: $RUNNER_TEMP"
        echo "GitHub workspace: $GITHUB_WORKSPACE"
        echo "Current directory: $(pwd)"
        echo ""
        echo "📁 Project structure:"
        ls -la
        echo ""
        echo "🏗️ Xcode project info:"
        xcodebuild -list -project HealthExporter.xcodeproj
        echo ""
        echo "🔐 Available secrets (masked):"
        echo "BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' && '✅ Set' || '❌ Missing' }}"
        echo "DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 != '' && '✅ Set' || '❌ Missing' }}"
        echo "BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 != '' && '✅ Set' || '❌ Missing' }}"
        echo "DISTRIBUTION_PROVISION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROVISION_PROFILE_BASE64 != '' && '✅ Set' || '❌ Missing' }}"
        echo "TEAM_ID: ${{ secrets.TEAM_ID != '' && '✅ Set' || '❌ Missing' }}"
        echo "APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID != '' && '✅ Set' || '❌ Missing' }}"
        echo "APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID != '' && '✅ Set' || '❌ Missing' }}"
        echo "APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY != '' && '✅ Set' || '❌ Missing' }}"
        
    - name: Test simulator build (no code signing)
      run: |
        echo "🧪 Testing simulator build first..."
        xcodebuild clean build \
          -project HealthExporter.xcodeproj \
          -scheme HealthExporter \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -configuration Release \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | head -50
          
        echo "✅ Simulator build test completed"
        
    - name: Install certificates (if available)
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
        DISTRIBUTION_P12_PASSWORD: ${{ secrets.DISTRIBUTION_P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        DISTRIBUTION_PROVISION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then
          echo "⚠️ No certificates provided - skipping code signing setup"
          echo "To fix: Add required secrets to repository settings"
          exit 0
        fi
        
        echo "🔐 Setting up code signing..."
        
        # Create variables
        BUILD_CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        DIST_CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
        BUILD_PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        DIST_PP_PATH=$RUNNER_TEMP/distribution_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificates and provisioning profiles from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $BUILD_CERTIFICATE_PATH
        echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DIST_CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $BUILD_PP_PATH
        echo -n "$DISTRIBUTION_PROVISION_PROFILE_BASE64" | base64 --decode -o $DIST_PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificates to keychain
        security import $BUILD_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $DIST_CERTIFICATE_PATH -P "$DISTRIBUTION_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profiles
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $BUILD_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        cp $DIST_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Verify installation
        echo "✅ Code signing identities:"
        security find-identity -v -p codesigning
        echo ""
        echo "📋 Provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Increment build number
      run: |
        BUILD_NUMBER=$(date +%Y%m%d%H%M)
        echo "📈 Setting build number to: $BUILD_NUMBER"
        
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" HealthExporter/Info.plist
        sed -i '' "s/CURRENT_PROJECT_VERSION = [0-9]*;/CURRENT_PROJECT_VERSION = $BUILD_NUMBER;/g" HealthExporter.xcodeproj/project.pbxproj
        
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        
    - name: Build archive
      run: |
        echo "🏗️ Building archive..."
        echo "Archive path: $RUNNER_TEMP/HealthExporter.xcarchive"
        
        # Show current code signing settings
        echo "📋 Build settings:"
        xcodebuild -project HealthExporter.xcodeproj -scheme HealthExporter -configuration Release -showBuildSettings | grep -E "(CODE_SIGN|TEAM|BUNDLE)"
        
        # Build archive
        xcodebuild clean archive \
          -project HealthExporter.xcodeproj \
          -scheme HealthExporter \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath $RUNNER_TEMP/HealthExporter.xcarchive \
          -allowProvisioningUpdates
          
        # Verify archive was created
        if [ -d "$RUNNER_TEMP/HealthExporter.xcarchive" ]; then
          echo "✅ Archive created successfully"
          echo "📁 Archive contents:"
          ls -la "$RUNNER_TEMP/HealthExporter.xcarchive"
          ls -la "$RUNNER_TEMP/HealthExporter.xcarchive/Products/"
        else
          echo "❌ Archive not found!"
          exit 1
        fi
        
    - name: Test export (dry run)
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        if [ -z "$TEAM_ID" ]; then
          echo "⚠️ No TEAM_ID provided - skipping export test"
          exit 0
        fi
        
        echo "📦 Testing export process..."
        
        # Create export options plist
        cat > $RUNNER_TEMP/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>destination</key>
          <string>export</string>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>$TEAM_ID</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>compileBitcode</key>
          <false/>
        </dict>
        </plist>
        EOF
        
        echo "📄 Export options:"
        cat $RUNNER_TEMP/ExportOptions.plist
        
        # Export archive
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/HealthExporter.xcarchive \
          -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
          -exportPath $RUNNER_TEMP/export
          
        # Check results
        if [ -d "$RUNNER_TEMP/export" ]; then
          echo "✅ Export successful"
          echo "📁 Export contents:"
          ls -la "$RUNNER_TEMP/export/"
          
          IPA_FILE=$(find "$RUNNER_TEMP/export" -name "*.ipa" | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "✅ Found IPA file: $IPA_FILE"
            echo "📏 IPA file size: $(du -h "$IPA_FILE")"
            echo "EXPORT_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "❌ No IPA file found!"
          fi
        else
          echo "❌ Export failed!"
        fi
        
    - name: Test App Store Connect upload (if not skipped)
      if: env.EXPORT_SUCCESS == 'true' && github.event.inputs.skip_upload != 'true'
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      run: |
        echo "🚀 Testing App Store Connect upload..."
        
        if [ -z "$APP_STORE_CONNECT_API_KEY_ID" ]; then
          echo "⚠️ App Store Connect API credentials not provided"
          exit 0
        fi
        
        IPA_FILE=$(find "$RUNNER_TEMP/export" -name "*.ipa" | head -1)
        echo "📱 Uploading: $IPA_FILE"
        
        # Create API key file
        echo "$APP_STORE_CONNECT_PRIVATE_KEY" > $RUNNER_TEMP/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
        chmod 600 $RUNNER_TEMP/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
        
        # Upload to App Store Connect
        xcrun altool --upload-app \
          -f "$IPA_FILE" \
          --type ios \
          --apiKey $APP_STORE_CONNECT_API_KEY_ID \
          --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \
          --verbose
          
        echo "✅ Upload completed successfully!"
        
    - name: Summary
      if: always()
      run: |
        echo ""
        echo "📋 Build Summary:"
        echo "==============="
        echo "Build Number: $BUILD_NUMBER"
        echo "Archive: $( [ -d "$RUNNER_TEMP/HealthExporter.xcarchive" ] && echo "✅ Created" || echo "❌ Failed" )"
        echo "Export: $( [ "$EXPORT_SUCCESS" == "true" ] && echo "✅ Successful" || echo "❌ Failed" )"
        echo "Upload: $( [ "${{ github.event.inputs.skip_upload }}" == "true" ] && echo "⏭️ Skipped" || echo "🚀 Attempted" )"
        echo ""
        echo "🔧 Next steps:"
        echo "1. If archive failed: Check code signing certificates"
        echo "2. If export failed: Check Team ID and provisioning profiles"  
        echo "3. If upload failed: Check App Store Connect API credentials"
        echo "4. All working? Use the main app-store-deploy.yml workflow"
        
    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true