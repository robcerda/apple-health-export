name: iOS Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  XCODE_VERSION: '16.0'
  IOS_DESTINATION: 'platform=iOS Simulator,name=iPhone 16,OS=18.5'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
        xcodebuild -version
        
    - name: Cache Xcode DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-deriveddata-${{ hashFiles('**/*.xcodeproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-deriveddata-
          
    - name: Install provisioning profiles and certificates
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Only run if certificates are provided (for App Store builds)
        if [ -n "$BUILD_CERTIFICATE_BASE64" ]; then
          echo "Setting up code signing..."
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        else
          echo "No code signing certificates provided, will build for simulator only"
        fi
        
    - name: Build for Simulator
      run: |
        xcodebuild clean build \
          -project HealthExporter.xcodeproj \
          -scheme HealthExporter \
          -destination "$IOS_DESTINATION" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}
          
    - name: Run Unit Tests
      run: |
        xcodebuild test \
          -project HealthExporter.xcodeproj \
          -scheme HealthExporter \
          -destination "$IOS_DESTINATION" \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}
      continue-on-error: true # Tests might not exist yet
      
    - name: Build for Device (if certificates available)
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      if: env.BUILD_CERTIFICATE_BASE64 != ''
      run: |
        xcodebuild clean build \
          -project HealthExporter.xcodeproj \
          -scheme HealthExporter \
          -destination 'generic/platform=iOS' \
          -configuration Release \
          -archivePath $RUNNER_TEMP/HealthExporter.xcarchive \
          archive \
          | xcpretty && exit ${PIPESTATUS[0]}
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/Logs/**
        retention-days: 7
        
    - name: Clean up keychain
      if: always()
      run: |
        if [ -f "$RUNNER_TEMP/app-signing.keychain-db" ]; then
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        fi

  code-quality:
    name: Code Quality Checks
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
      
    - name: SwiftLint
      run: |
        # Install SwiftLint if not available
        if ! command -v swiftlint &> /dev/null; then
          echo "Installing SwiftLint..."
          brew install swiftlint
        fi
        
        # Run SwiftLint
        swiftlint --config .swiftlint.yml || echo "SwiftLint not configured yet"
      continue-on-error: true
      
    - name: Check for TODOs and FIXMEs
      run: |
        echo "Checking for TODOs and FIXMEs..."
        find . -name "*.swift" -exec grep -l "TODO\|FIXME" {} \; || echo "No TODOs or FIXMEs found"
        
    - name: Security Check
      run: |
        echo "Checking for potential security issues..."
        # Check for hardcoded secrets, API keys, etc.
        if grep -r -i "api_key\|secret\|password\|token" --include="*.swift" .; then
          echo "⚠️  Potential secrets found in code"
          exit 1
        else
          echo "✅ No obvious secrets found"
        fi
      continue-on-error: true