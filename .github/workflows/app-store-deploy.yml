name: Deploy to App Store

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual trigger
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  XCODE_VERSION: '16.0'

jobs:
  deploy-to-app-store:
    name: Build and Deploy to App Store
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
        xcodebuild -version
        
    - name: Debug environment
      run: |
        echo "üîç Environment Debug Info:"
        echo "Runner temp: $RUNNER_TEMP"
        echo "GitHub workspace: $GITHUB_WORKSPACE"
        echo "Available schemes:"
        xcodebuild -list -project HealthExporter.xcodeproj
        echo ""
        echo "Security identities:"
        security find-identity -v -p codesigning || echo "No code signing identities found yet"
        
    - name: Install certificates and provisioning profiles
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
        DISTRIBUTION_P12_PASSWORD: ${{ secrets.DISTRIBUTION_P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        DISTRIBUTION_PROVISION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        BUILD_CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        DIST_CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
        BUILD_PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        DIST_PP_PATH=$RUNNER_TEMP/distribution_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificates and provisioning profiles from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $BUILD_CERTIFICATE_PATH
        echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $DIST_CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $BUILD_PP_PATH
        echo -n "$DISTRIBUTION_PROVISION_PROFILE_BASE64" | base64 --decode -o $DIST_PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificates to keychain
        security import $BUILD_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $DIST_CERTIFICATE_PATH -P "$DISTRIBUTION_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profiles
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $BUILD_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        cp $DIST_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Verify installation
        echo "‚úÖ Code signing setup complete:"
        security find-identity -v -p codesigning
        echo ""
        echo "üìã Provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Increment build number
      run: |
        # Get current build number and increment
        BUILD_NUMBER=$(date +%Y%m%d%H%M)
        echo "Setting build number to: $BUILD_NUMBER"
        
        # Update build number in project
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" HealthExporter/Info.plist
        
        # Also update in project.pbxproj if needed
        sed -i '' "s/CURRENT_PROJECT_VERSION = [0-9]*;/CURRENT_PROJECT_VERSION = $BUILD_NUMBER;/g" HealthExporter.xcodeproj/project.pbxproj
        
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        
    - name: Run tests (if not skipped)
      if: github.event.inputs.skip_tests != 'true'
      run: |
        xcodebuild test \
          -project HealthExporter.xcodeproj \
          -scheme HealthExporter \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' \
          -configuration Release \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          | xcpretty && exit ${PIPESTATUS[0]}
      continue-on-error: true
      
    - name: Build archive
      env:
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        echo "üèóÔ∏è Building archive..."
        echo "Archive path: $RUNNER_TEMP/HealthExporter.xcarchive"
        
        xcodebuild clean archive \
          -project HealthExporter.xcodeproj \
          -scheme HealthExporter \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath $RUNNER_TEMP/HealthExporter.xcarchive \
          -allowProvisioningUpdates \
          CODE_SIGN_IDENTITY="Apple Distribution" \
          CODE_SIGN_STYLE="Manual" \
          PROVISIONING_PROFILE_SPECIFIER="Health Exporter App Store" \
          DEVELOPMENT_TEAM="$TEAM_ID" \
          | xcpretty && exit ${PIPESTATUS[0]}
          
        # Verify archive was created
        if [ -d "$RUNNER_TEMP/HealthExporter.xcarchive" ]; then
          echo "‚úÖ Archive created successfully"
          ls -la "$RUNNER_TEMP/HealthExporter.xcarchive"
        else
          echo "‚ùå Archive not found!"
          exit 1
        fi
          
    - name: Export for App Store
      run: |
        echo "üì¶ Exporting for App Store..."
        echo "Export path: $RUNNER_TEMP/export"
        
        # Create export options plist
        cat > $RUNNER_TEMP/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>destination</key>
          <string>export</string>
          <key>method</key>
          <string>app-store-connect</string>
          <key>teamID</key>
          <string>${{ secrets.TEAM_ID }}</string>
          <key>signingStyle</key>
          <string>manual</string>
          <key>signingCertificate</key>
          <string>Apple Distribution</string>
          <key>provisioningProfiles</key>
          <dict>
            <key>com.amnesic.dev.healthexporter</key>
            <string>Health Exporter App Store</string>
          </dict>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>compileBitcode</key>
          <false/>
        </dict>
        </plist>
        EOF
        
        echo "üìÑ Export options plist:"
        cat $RUNNER_TEMP/ExportOptions.plist
        
        # Export archive
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/HealthExporter.xcarchive \
          -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
          -exportPath $RUNNER_TEMP/export \
          | xcpretty && exit ${PIPESTATUS[0]}
          
        # Verify export was created
        if [ -d "$RUNNER_TEMP/export" ]; then
          echo "‚úÖ Export created successfully"
          ls -la "$RUNNER_TEMP/export/"
          
          # Find the .ipa file
          IPA_FILE=$(find "$RUNNER_TEMP/export" -name "*.ipa" | head -1)
          if [ -n "$IPA_FILE" ]; then
            echo "‚úÖ Found IPA file: $IPA_FILE"
            echo "IPA_FILE=$IPA_FILE" >> $GITHUB_ENV
          else
            echo "‚ùå No IPA file found in export!"
            exit 1
          fi
        else
          echo "‚ùå Export directory not found!"
          exit 1
        fi
          
    - name: Upload to App Store Connect
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      run: |
        echo "üöÄ Uploading to App Store Connect..."
        echo "DEBUG: IPA_FILE environment variable: '$IPA_FILE'"
        echo "DEBUG: Checking export directory contents:"
        ls -la "$RUNNER_TEMP/export/" || echo "Export directory not found"
        
        # Debug environment variables (GitHub masks sensitive values with ***)
        echo "üîç Debug Environment Variables:"
        echo "API_KEY_ID: '$APP_STORE_CONNECT_API_KEY_ID'"
        echo "ISSUER_ID: '$APP_STORE_CONNECT_ISSUER_ID'"
        echo "PRIVATE_KEY length: ${#APP_STORE_CONNECT_PRIVATE_KEY} characters"
        echo "PRIVATE_KEY starts with: '$(echo "$APP_STORE_CONNECT_PRIVATE_KEY" | head -c 30)...'"
        
        # Verify the values are actually loaded (check lengths)
        echo "üîç Value verification:"
        echo "API_KEY_ID length: ${#APP_STORE_CONNECT_API_KEY_ID} characters (should be 10)"
        echo "ISSUER_ID length: ${#APP_STORE_CONNECT_ISSUER_ID} characters (should be 36)"
        echo "PRIVATE_KEY length: ${#APP_STORE_CONNECT_PRIVATE_KEY} characters (should be around 256)"
        
        # Find IPA file if not set
        if [ -z "$IPA_FILE" ]; then
          echo "IPA_FILE not set, searching for IPA file..."
          IPA_FILE=$(find "$RUNNER_TEMP/export" -name "*.ipa" | head -1)
          echo "Found IPA file: $IPA_FILE"
        fi
        
        if [ -z "$IPA_FILE" ] || [ ! -f "$IPA_FILE" ]; then
          echo "‚ùå No valid IPA file found!"
          exit 1
        fi
        
        echo "Using IPA file: $IPA_FILE"
        
        # Validate environment variables
        if [ -z "$APP_STORE_CONNECT_API_KEY_ID" ]; then
          echo "‚ùå APP_STORE_CONNECT_API_KEY_ID is empty!"
          exit 1
        fi
        
        if [ -z "$APP_STORE_CONNECT_ISSUER_ID" ]; then
          echo "‚ùå APP_STORE_CONNECT_ISSUER_ID is empty!"
          exit 1
        fi
        
        if [ -z "$APP_STORE_CONNECT_PRIVATE_KEY" ]; then
          echo "‚ùå APP_STORE_CONNECT_PRIVATE_KEY is empty!"
          exit 1
        fi
        
        # Create API key file in multiple locations that altool searches
        mkdir -p ~/.private_keys
        mkdir -p ~/.appstoreconnect/private_keys
        mkdir -p ~/private_keys
        mkdir -p ~/work/apple-health-export/apple-health-export/private_keys
        
        # Create the API key file in all potential locations with explicit variable expansion
        API_KEY_FILENAME="AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8"
        echo "üìÑ Creating API key file: $API_KEY_FILENAME"
        
        echo "$APP_STORE_CONNECT_PRIVATE_KEY" > ~/.private_keys/$API_KEY_FILENAME
        echo "$APP_STORE_CONNECT_PRIVATE_KEY" > ~/.appstoreconnect/private_keys/$API_KEY_FILENAME
        echo "$APP_STORE_CONNECT_PRIVATE_KEY" > ~/private_keys/$API_KEY_FILENAME
        echo "$APP_STORE_CONNECT_PRIVATE_KEY" > ~/work/apple-health-export/apple-health-export/private_keys/$API_KEY_FILENAME
        
        # Set proper permissions
        chmod 600 ~/.private_keys/$API_KEY_FILENAME
        chmod 600 ~/.appstoreconnect/private_keys/$API_KEY_FILENAME
        chmod 600 ~/private_keys/$API_KEY_FILENAME
        chmod 600 ~/work/apple-health-export/apple-health-export/private_keys/$API_KEY_FILENAME
        
        # Verify the file was created and has correct content
        echo "‚úÖ API key files created:"
        ls -la ~/.private_keys/$API_KEY_FILENAME 2>/dev/null || echo "Not found in ~/.private_keys"
        ls -la ~/.appstoreconnect/private_keys/$API_KEY_FILENAME 2>/dev/null || echo "Not found in ~/.appstoreconnect/private_keys"
        ls -la ~/private_keys/$API_KEY_FILENAME 2>/dev/null || echo "Not found in ~/private_keys"
        ls -la ~/work/apple-health-export/apple-health-export/private_keys/$API_KEY_FILENAME 2>/dev/null || echo "Not found in project directory"
        
        # Verify file content
        echo "üîç Verifying API key file content:"
        if [ -f ~/.private_keys/$API_KEY_FILENAME ]; then
          echo "File exists: ~/.private_keys/$API_KEY_FILENAME"
          echo "File size: $(wc -c < ~/.private_keys/$API_KEY_FILENAME) bytes"
          echo "First line: $(head -1 ~/.private_keys/$API_KEY_FILENAME)"
          echo "Last line: $(tail -1 ~/.private_keys/$API_KEY_FILENAME)"
        fi
        
        # Test credentials locally before upload
        echo "üß™ Testing API credentials locally first..."
        /Applications/Xcode_16.app/Contents/SharedFrameworks/ContentDeliveryServices.framework/Frameworks/AppStoreService.framework/Support/altool \
          --list-apps \
          --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
          --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
          --verbose
        
        LOCAL_TEST_RESULT=$?
        if [ $LOCAL_TEST_RESULT -eq 0 ]; then
          echo "‚úÖ Local API credential test passed"
        else
          echo "‚ùå Local API credential test failed with exit code: $LOCAL_TEST_RESULT"
          echo "This suggests an issue with the API credentials before attempting upload"
        fi
        
        # Upload to App Store Connect using altool
        echo "üöÄ Testing App Store Connect upload..."
        echo "üì± Uploading: $IPA_FILE"
        echo "üîë Using API Key ID: $APP_STORE_CONNECT_API_KEY_ID"
        echo "üè¢ Using Issuer ID: $APP_STORE_CONNECT_ISSUER_ID"
        
        # Use altool with explicit path checking
        ALTOOL_PATH="/Applications/Xcode_16.app/Contents/SharedFrameworks/ContentDeliveryServices.framework/Frameworks/AppStoreService.framework/Support/altool"
        echo "Running altool at path '$ALTOOL_PATH'..."
        
        if [ -f "$ALTOOL_PATH" ]; then
          # Use the specific altool path
          "$ALTOOL_PATH" --upload-app \
            -f "$IPA_FILE" \
            --type ios \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
            --verbose
        else
          # Fallback to xcrun altool
          echo "Using xcrun altool as fallback..."
          xcrun altool --upload-app \
            -f "$IPA_FILE" \
            --type ios \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
            --verbose
        fi
        
        # Check if upload was successful
        if [ $? -eq 0 ]; then
          echo "‚úÖ Successfully uploaded to App Store Connect"
        else
          echo "‚ùå Upload failed - check API key configuration and Team ID"
          echo "üîç Troubleshooting:"
          echo "- Verify APP_STORE_CONNECT_API_KEY_ID secret is correct"
          echo "- Verify APP_STORE_CONNECT_ISSUER_ID secret is correct"
          echo "- Verify APP_STORE_CONNECT_PRIVATE_KEY secret contains valid .p8 content"
          echo "- Check that the API key has App Manager role in App Store Connect"
          exit 1
        fi
          
        echo "‚úÖ Upload to App Store Connect completed"
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: app-store-build-${{ env.BUILD_NUMBER }}
        path: |
          ${{ runner.temp }}/export/
          ${{ runner.temp }}/HealthExporter.xcarchive
        retention-days: 30
        if-no-files-found: warn
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Health Exporter ${{ github.ref_name }}
          
          ### üì± App Store
          Build ${{ env.BUILD_NUMBER }} has been uploaded to App Store Connect.
          
          ### ‚ú® What's New
          - Add your release notes here
          
          ### üîí Privacy & Security
          - Zero network requests - your data stays on your device
          - Optional encryption with user-controlled passwords
          - Open source and auditable
          
        draft: true
        prerelease: false
        
    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true